import {createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import {apiSlice } from "../../app/api/apiSlice";

// Create an entity adapter for managing user entities
const userEntityManager = createEntityAdapter({});

// Define the initial state using the entity adapter, if it exict
const initialUserState = userEntityManager.getInitialState();
// Inject endpoints into the apiSlice from the external apiSlice module
export const usersApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        // Define the 'getUsers' endpoint for fetching users
        getUsers: builder.query({
            query: () => '/users', // Endpoint URL
            validateStatus: (response, result) => {
                // Custom status validation function some error return 200 status, so we need to check them both.
                return response.status === 200 && !result.isError;
            },
            
            transformResponse: responseData => {
                // Transform response data before storing it in the Redux store
                const loadedUsers = responseData.map(user => {
                    user.id = user._id; // Assign 'id' property to user object
                    return user;
                });
                return userEntityManager.setAll(initialUserState, loadedUsers); // Update state with transformed data
            },
            providesTags: (result, error, arg) => {
                // Provide tags for caching purposes
                if (result?.ids) {
                    return [
                        { type: 'User', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'User', id }))
                    ];
                } else return [{ type: 'User', id: 'LIST' }];
            }
        }),

        // Define mutation endpoints for adding, updating, and deleting users
        addNewUser: builder.mutation({
            query: initialUserData => ({
                url: '/users', // API endpoint URL for updating users
                method: 'POST',
                body: {  ...initialUserData, } // Data to be sent in the request body
            }),
            invalidatesTags: [ { type: 'User', id: "LIST" } ] // Invalidate cached user list after adding a new user
        }),
        updateUser: builder.mutation({
            query: initialUserData => ({
                url: '/users', // API endpoint URL for updating users
                method: 'PATCH', // HTTP method for updating users
                body: {  ...initialUserData,} // Data to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'User', id: arg.id } ] // Invalidate cached user after updating
        }),
        deleteUser: builder.mutation({
            query: ({ id }) => ({
                url: `/users`,
                method: 'DELETE', // HTTP method for deleting users
                body: { id } //  // ID to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'User', id: arg.id } ] // Invalidate cached user after deletion
        }),
    }),
});

// Export query hooks generated by the apiSlice
export const {
    useGetUsersQuery,
    useAddNewUserMutation, // Add the 3 mutation of CRUD
    useUpdateUserMutation,
    useDeleteUserMutation,
} = usersApiSlice;

// Select the query result object from the getUsers endpoint
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// Create a memoized selector to extract users data from the query result
const selectUsersData = createSelector(
    selectUsersResult,
    usersResult => usersResult.data // normalized state object with ids & entities
);

// Extract selectors using the entity adapter's getSelectors function
// Pass in a selector that returns the users slice of state
export const {
    selectAll: selectAllUsers,
    selectById: selectUserById,
    selectIds: selectUserIds
} = userEntityManager.getSelectors(state => selectUsersData(state) ?? initialUserState);
