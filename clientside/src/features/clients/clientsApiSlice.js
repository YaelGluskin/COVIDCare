import {createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import {apiSlice } from "../../app/api/apiSlice";

// Create an entity adapter for managing client entities
const clientEntityManager = createEntityAdapter({});

// Define the initial state using the entity adapter, if it exict
const initialClientState = clientEntityManager.getInitialState();
// Inject endpoints into the apiSlice from the external apiSlice module
export const clientsApiSlice = apiSlice.injectEndpoints({

});

// Export query hooks generated by the apiSlice
export const {
    useGetClientsQuery,
} = clientsApiSlice;

// Select the query result object from the getClients endpoint
export const selectClientsResult = clientsApiSlice.endpoints.getClients.select();

// Create a memoized selector to extract clients data from the query result
const selectClientsData = createSelector(
    selectClientsResult,
    clientsResult => clientsResult.data // normalized state object with ids & entities
);

// Extract selectors using the entity adapter's getSelectors function
// Pass in a selector that returns the clients slice of state
export const {
    selectAll: selectAllClients,
    selectById: selectClientById,
    selectIds: selectClientIds
} = clientEntityManager.getSelectors(state => selectClientsData(state) ?? initialClientState);
