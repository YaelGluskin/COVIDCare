import {createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import {apiSlice } from "../../app/api/apiSlice";

// Create an entity adapter for managing vaccine entities
const vaccineEntityManager = createEntityAdapter({});

// Define the initial state using the entity adapter, if it exict
const initialVaccineState = vaccineEntityManager.getInitialState();
// Inject endpoints into the apiSlice from the external apiSlice module
export const vaccinesApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        // Define the 'getVaccines' endpoint for fetching vaccines
        getVaccines: builder.query({
            query: () => '/vaccines', // Endpoint URL
            validateStatus: (response, result) => {
                // Custom status validation function some error return 200 status, so we need to check them both.
                return response.status === 200 && !result.isError;
            },
            transformResponse: responseData => {
                // Transform response data before storing it in the Redux store
                const loadedVaccines = responseData.map(vaccine => {
                    vaccine.id = vaccine._id; // Assign 'id' property to vaccine object
                    return vaccine;
                });
                return vaccineEntityManager.setAll(initialVaccineState, loadedVaccines); // Update state with transformed data
            },
            providesTags: (result, error, arg) => {
                // Provide tags for caching purposes
                if (result?.ids) {
                    return [
                        { type: 'Vaccine', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'Vaccine', id }))
                    ];
                } else return [{ type: 'Vaccine', id: 'LIST' }];
            }
        }),
        // Define mutation endpoints for adding, updating, and deleting vaccines
        addNewVaccine: builder.mutation({
            query: initialVaccineData => ({
                url: '/vaccines', // API endpoint URL for updating vaccines
                method: 'POST',
                body: {  ...initialVaccineData, } // Data to be sent in the request body
            }),
            invalidatesTags: [ { type: 'Vaccine', id: "LIST" } ] // Invalidate cached vaccine list after adding a new vaccine
        }),
        updateVaccine: builder.mutation({
            query: initialVaccineData => ({
                url: '/vaccines', // API endpoint URL for updating vaccines
                method: 'PATCH', // HTTP method for updating vaccines
                body: {  ...initialVaccineData,} // Data to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'Vaccine', id: arg.id } ] // Invalidate cached vaccine after updating
        }),
        deleteVaccine: builder.mutation({
            query: ({ id }) => ({
                url: `/vaccines`,
                method: 'DELETE', // HTTP method for deleting vaccines
                body: { id } //  // ID to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'Vaccine', id: arg.id } ] // Invalidate cached vaccine after deletion
        }),
    }), // End endpoints
});

// Export query hooks generated by the apiSlice
export const {
    useGetVaccinesQuery,
    useAddNewvaccineMutation, // Add the 3 mutation of CRUD
    useUpdatevaccineMutation,
    useDeletevaccineMutation,
} = vaccinesApiSlice;

// Select the query result object from the getVaccines endpoints
export const selectVaccinesResult = vaccinesApiSlice.endpoints.getVaccines.select();

// Create a memoized selector to extract vaccines data from the query result
const selectVaccinesData = createSelector(
    selectVaccinesResult,
    vaccinesResult => vaccinesResult.data // normalized state object with ids & entities
);

// Extract selectors using the entity adapter's getSelectors function
// Pass in a selector that returns the vaccines slice of state
export const {
    selectAll: selectAllVaccines,
    selectById: selectVaccineById,
    selectIds: selectVaccineIds
} = vaccineEntityManager.getSelectors(state => selectVaccinesData(state) ?? initialVaccineState);
