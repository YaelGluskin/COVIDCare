import {createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import {apiSlice } from "../../app/api/apiSlice";

// Create an entity adapter for managing disease entities
const diseaseEntityManager = createEntityAdapter({});

// Define the initial state using the entity adapter, if it exict
const initialDiseaseState = diseaseEntityManager.getInitialState();
// Inject endpoints into the apiSlice from the external apiSlice module
export const diseasesApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        // Define the 'getDiseases' endpoint for fetching diseases
        getDiseases: builder.query({
            query: () => '/diseases', // Endpoint URL
            validateStatus: (response, result) => {
                // Custom status validation function some error return 200 status, so we need to check them both.
                return response.status === 200 && !result.isError;
            },
            transformResponse: responseData => {
                // Transform response data before storing it in the Redux store
                const loadedDiseases = responseData.map(disease => {
                    disease.id = disease._id; // Assign 'id' property to disease object
                    return disease;
                });
                return diseaseEntityManager.setAll(initialDiseaseState, loadedDiseases); // Update state with transformed data
            },
            providesTags: (result, error, arg) => {
                // Provide tags for caching purposes
                if (result?.ids) {
                    return [
                        { type: 'Disease', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'Disease', id }))
                    ];
                } else return [{ type: 'Disease', id: 'LIST' }];
            }
        }),

        // Define mutation endpoints for adding, updating, and deleting diseases
        addNewDisease: builder.mutation({
            query: initialDiseaseData => ({
                url: '/diseases', // API endpoint URL for updating diseases
                method: 'POST',
                body: {  ...initialDiseaseData, } // Data to be sent in the request body
            }),
            invalidatesTags: [ { type: 'Disease', id: "LIST" } ] // Invalidate cached disease list after adding a new disease
        }),
        updateDisease: builder.mutation({
            query: initialDiseaseData => ({
                url: '/diseases', // API endpoint URL for updating diseases
                method: 'PATCH', // HTTP method for updating diseases
                body: {  ...initialDiseaseData,} // Data to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'Disease', id: arg.id } ] // Invalidate cached disease after updating
        }),
        deleteDisease: builder.mutation({
            query: ({ id }) => ({
                url: `/diseases`,
                method: 'DELETE', // HTTP method for deleting diseases
                body: { id } //  // ID to be sent in the request body
            }),
            invalidatesTags: (result, error, arg) => [ { type: 'Disease', id: arg.id } ] // Invalidate cached disease after deletion
        }),
    }), // End endpoints
});

// Export query hooks generated by the apiSlice
export const {
    useGetDiseasesQuery,
    useAddNewDiseaseMutation, // Add the 3 mutation of CRUD
    useUpdateDiseaseMutation,
    useDeleteDiseaseMutation,
} = diseasesApiSlice;

// Select the query result object from the getDiseases endpoints
export const selectDiseasesResult = diseasesApiSlice.endpoints.getDiseases.select();

// Create a memoized selector to extract diseases data from the query result
const selectDiseasesData = createSelector(
    selectDiseasesResult,
    diseasesResult => diseasesResult.data // normalized state object with ids & entities
);

// Extract selectors using the entity adapter's getSelectors function
// Pass in a selector that returns the diseases slice of state
export const {
    selectAll: selectAllDiseases,
    selectById: selectDiseaseById,
    selectIds: selectDiseaseIds
} = diseaseEntityManager.getSelectors(state => selectDiseasesData(state) ?? initialDiseaseState);
